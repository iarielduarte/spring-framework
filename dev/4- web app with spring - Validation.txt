
29. Para realizar las validaciones se agrega una nueva dependencia en el POM.XML
	 <dependency>
      		<groupId>org.hibernate</groupId>
     		<artifactId>hibernate-validator</artifactId>
     		<version>4.2.0.Final</version>
   	 </dependency>

30. Se actualiza los atributos de los pojos agregando las annotation de hibernate-validator
	para campos String : @NotEmpty
	para campos int: @Range(min=1, max=120)

	@NotEmpty
	private String roles;

	@NotEmpty
	private String name;

31. Se actualiza las clases controladoras
	- En el metodo updateUser() se agrega la anotacion @Valid y BindingResult result
	  public String updateUser(@Valid @ModelAttribute("cmduser") User user, BindingResult result)
	- Se campatura el error asi : result.hasErrors() esto devuelve true o false
	- El metodo quedaria asi:
		@RequestMapping(value = "addUser", method = RequestMethod.POST)
		public String updateUser(@Valid @ModelAttribute("cmduser") User user, BindingResult result) {

		if (result.hasErrors()) {
			System.out.println("Resutl has errors: " + result.hasErrors());
			return "addUser";
		}
		System.out.println("User updated :" + user.getName());

		return "redirect:addRole.html";
		}

32. Se agregan unos estilos a la vista de addUser.jsp para darle mas enfasis a los mensajes de error
	- Esto se agrega dentro del <head>
	<style type="text/css">
		.error{
		color: #ff0000;
		}

		.erroblock{
		color: #000;
		background-color: #ffEEEE;
		border: 3px solid #ff0000;
		padding: 8px;
		magin: 16px;
		}
	</style>
	
	- Dentro del <form> se agrega la etiqueta para capturar el error:
			<form:errors path="*" cssClass="erroblock" element="div"></form:errors>

	- Para marcar los errores se agrega los css asi
				<td>Enter User</td>
				<td><form:input path="name" cssClass="error" /></td>
				<td><form:errors path="name" cssClass="error"/></td>

33. Se personaliza el mensaje de error desde nuestro messages.properties
	- Agregamos esta valor :
		NotEmpty.user.name=Please fill input name user
	
	   

	
	